from typing import List, Dict, Any
import requests
import json
from pydantic import BaseModel


class IntentResult(BaseModel):
    intent: List[str]
    reason: str


class IntentClassifier:
    """
    Intelligent Intent Classifier component that analyzes user messages
    to determine their intent using LLM API calls.
    """
    
    INTENT_LABELS = {
        "PROBLEM_DEFINITION", 
        "CONSTRAINT_ADDITION", 
        "REFINEMENT", 
        "QUESTION", 
        "UNCLEAR"
    }
    
    PROMPT_TEMPLATE = """# ÂëΩ‰ª§
„ÅÇ„Å™„Åü„ÅØ„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆÁô∫Ë®Ä„ÅÆ„ÄåÊÑèÂõ≥„Äç„ÇíÂàÜÊûê„Åô„ÇãÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆÊâãÈ†Ü„Å´Âæì„Å£„Å¶„ÄÅ„É¶„Éº„Ç∂„ÉºÁô∫Ë®Ä„ÇíÂàÜÊûê„Åó„ÄÅÁµêÊûú„ÇíJSONÂΩ¢Âºè„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

# ÊâãÈ†Ü
1. „É¶„Éº„Ç∂„ÉºÁô∫Ë®Ä„ÇíÊ≥®ÊÑèÊ∑±„ÅèË™≠„Åø„ÄÅ„Åù„ÅÆÁô∫Ë®Ä„Åå‰Ωï„ÇíÁõÆÁöÑ„Å®„Åó„Å¶„ÅÑ„Çã„Åã„ÇíÂàÜÊûê„Åó„Åæ„Åô„ÄÇ
2. ÂàÜÊûê„Åó„ÅüÁµêÊûú„ÄÅÊúÄ„ÇÇÂêàËá¥„Åô„ÇãÊÑèÂõ≥„É©„Éô„É´„Çí‰∏ãË®ò„ÅÆ„Äå„É©„Éô„É´ÂÆöÁæ©„Äç„Åã„ÇâÈÅ∏Êäû„Åó„Åæ„Åô„ÄÇÊÑèÂõ≥„ÅåË§áÊï∞Âê´„Åæ„Çå„ÇãÂ†¥Âêà„ÅØ„ÄÅ„É™„Çπ„ÉàÂΩ¢Âºè„ÅßÊúÄÂ§ß2„Å§„Åæ„ÅßÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
3. „Å™„Åú„Åù„ÅÆ„É©„Éô„É´„ÇíÈÅ∏Êäû„Åó„Åü„ÅÆ„Åã„ÄÅÁêÜÁî±„ÇíÁ∞°ÊΩî„Å´Ë®òËø∞„Åó„Åæ„Åô„ÄÇ
4. ÊúÄÁµÇÁöÑ„Å™ÁµêÊûú„Çí„ÄÅÊåáÂÆö„Åï„Çå„ÅüJSONÂΩ¢Âºè„ÅßÂá∫Âäõ„Åó„Åæ„Åô„ÄÇ

# „É©„Éô„É´ÂÆöÁæ©
- PROBLEM_DEFINITION: „É¶„Éº„Ç∂„Éº„ÅåËß£Ê±∫„Åó„Åü„ÅÑ‰∏≠ÂøÉÁöÑ„Å™Ë™≤È°å„ÇíÂÆöÁæ©„Åó„Å¶„ÅÑ„Çã„ÄÇ
- CONSTRAINT_ADDITION: ‰∫àÁÆó„ÄÅÊúüÈñì„Å™„Å©„ÅÆÂà∂Á¥Ñ„ÇÑÊù°‰ª∂„ÇíËøΩÂä†„Åó„Å¶„ÅÑ„Çã„ÄÇ
- REFINEMENT: Êó¢Â≠ò„ÅÆË¶ÅÊ±Ç„Çí„Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å´„ÄÅ„Åæ„Åü„ÅØ‰øÆÊ≠£„Åó„Å¶„ÅÑ„Çã„ÄÇ
- QUESTION: ÂçòÁ¥î„Å™Ë≥™Âïè„Çí„Åó„Å¶„ÅÑ„Çã„ÄÇ
- UNCLEAR: ‰∏äË®ò„ÅÆ„ÅÑ„Åö„Çå„Å´„ÇÇÊòéÁ¢∫„Å´ÂàÜÈ°û„Åß„Åç„Å™„ÅÑ„ÄÇ

# „ÅäÊâãÊú¨ (Examples)
- Áô∫Ë®Ä: „ÄåAI„ÅßË≠∞‰∫ãÈå≤„ÇíËá™ÂãïË¶ÅÁ¥Ñ„Åó„Åü„ÅÑ„Çì„Å†„Åë„Å©„ÄÅ‰Ωï„Åã„ÅÑ„ÅÑÊñπÊ≥ï„ÅÇ„ÇãÔºü„Äç
  - JSON: {{"intent": ["PROBLEM_DEFINITION", "QUESTION"], "reason": "„É¶„Éº„Ç∂„Éº„ÅØ„ÄéË≠∞‰∫ãÈå≤„ÅÆËá™ÂãïË¶ÅÁ¥Ñ„Äè„Å®„ÅÑ„ÅÜ‰∏≠ÂøÉË™≤È°å„ÇíÊèêÁ§∫„Åó„ÄÅÂêåÊôÇ„Å´Ë≥™Âïè„Åó„Å¶„ÅÑ„Çã„ÄÇ"}}
- Áô∫Ë®Ä: „Äå„ÅÑ„ÅÑ„Å≠„ÄÇ„Åü„Å†„Åó„ÄÅÂà©Áî®„Åô„Çã„É¢„Éá„É´„ÅØ„Ç™„Éº„Éó„É≥„ÇΩ„Éº„Çπ„ÅÆ„ÇÇ„ÅÆ„Å´ÈôêÂÆö„Åó„Å¶„Åª„Åó„ÅÑ„ÄÇ„Äç
  - JSON: {{"intent": ["CONSTRAINT_ADDITION"], "reason": "„Äé„Ç™„Éº„Éó„É≥„ÇΩ„Éº„Çπ„Å´ÈôêÂÆö„Äè„Å®„ÅÑ„ÅÜÊòéÁ¢∫„Å™Âà∂Á¥Ñ„ÇíËøΩÂä†„Åó„Å¶„ÅÑ„Çã„ÄÇ"}}

# ÂàÜÊûêÂØæË±°
„É¶„Éº„Ç∂„ÉºÁô∫Ë®Ä: \"\"\"
{user_message}
\"\"\"

# Âá∫Âäõ
‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßÂøÖ„ÅöÂøúÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
{{"intent": [String], "reason": String}}

JSON:"""
    
    def __init__(self, api_url: str, api_key: str, model: str = "gpt-3.5-turbo"):
        # Ensure the URL includes the chat/completions endpoint
        if not api_url.endswith('/chat/completions'):
            if api_url.endswith('/'):
                self.api_url = api_url + 'chat/completions'
            else:
                self.api_url = api_url + '/chat/completions'
        else:
            self.api_url = api_url
        self.api_key = api_key
        self.model = model
    
    def classify_intent(self, user_message: str) -> IntentResult:
        """
        Classify the intent of a user message.
        
        Args:
            user_message: The user's message to classify
            
        Returns:
            IntentResult containing intent labels and reasoning
        """
        import logging
        logger = logging.getLogger(__name__)
        
        prompt = self.PROMPT_TEMPLATE.format(user_message=user_message)
        
        payload = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 500,
            "temperature": 0.1
        }
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        # Debug logging
        logger.info(f"üîß Intent Classification Debug:")
        logger.info(f"  API URL: {self.api_url}")
        logger.info(f"  Model: {self.model}")
        logger.info(f"  API Key: {'***' if self.api_key else '(empty)'}")
        logger.info(f"  User Message: {user_message}")
        
        try:
            # Use requests instead of httpx with increased timeout
            logger.info(f"üì° Sending request to Ollama...")
            response = requests.post(
                self.api_url,
                json=payload,
                headers=headers,
                timeout=30,  # Further increased timeout for Ollama's large model
                verify=False if self.api_url.startswith('http://') else True
            )
            logger.info(f"‚úÖ Response received: {response.status_code}")
            response.raise_for_status()
            
            result = response.json()
            logger.info(f"üîç Full Response JSON: {json.dumps(result, ensure_ascii=False, indent=2)}")
            
            # Handle Ollama's specific response structure
            message = result["choices"][0]["message"]
            content = message.get("content", "").strip()
            reasoning = message.get("reasoning", "").strip()
            
            logger.info(f"üìù LLM Response Content: {content}")
            logger.info(f"üìù LLM Response Reasoning: {reasoning}")
            
            # Try to parse JSON from content first, then from reasoning
            response_text = content if content else reasoning
            
            # Parse JSON response
            try:
                if response_text:
                    # Try to extract JSON from the response
                    if response_text.startswith("{"):
                        parsed = json.loads(response_text)
                    else:
                        # Look for JSON within the text
                        import re
                        json_match = re.search(r'\{[^}]*"intent"[^}]*\}', response_text)
                        if json_match:
                            parsed = json.loads(json_match.group())
                        else:
                            raise json.JSONDecodeError("No JSON found", response_text, 0)
                    
                    logger.info(f"‚úÖ JSON parsing successful: {parsed}")
                    return IntentResult(
                        intent=parsed["intent"],
                        reason=parsed["reason"]
                    )
                else:
                    raise json.JSONDecodeError("Empty response", "", 0)
                    
            except (json.JSONDecodeError, KeyError) as e:
                # Fallback to UNCLEAR if parsing fails
                logger.error(f"‚ùå JSON parsing failed: {e}")
                logger.error(f"   Raw response: {response_text}")
                return IntentResult(
                    intent=["UNCLEAR"],
                    reason=f"Failed to parse LLM response: {str(e)}"
                )
                
        except requests.exceptions.Timeout as e:
            # Handle timeout errors
            logger.error(f"‚ùå Request timeout: {e}")
            return IntentResult(
                intent=["UNCLEAR"],
                reason=f"Request timeout: {str(e)}"
            )
        except requests.exceptions.ConnectionError as e:
            # Handle connection errors
            logger.error(f"‚ùå Connection error: {e}")
            return IntentResult(
                intent=["UNCLEAR"],
                reason=f"Connection error: {str(e)}"
            )
        except requests.exceptions.HTTPError as e:
            # Handle HTTP errors
            logger.error(f"‚ùå HTTP error: {e}")
            error_text = ""
            try:
                error_text = e.response.text if hasattr(e.response, 'text') else str(e)
            except:
                error_text = str(e)
            return IntentResult(
                intent=["UNCLEAR"],
                reason=f"HTTP error {e.response.status_code}: {error_text}"
            )
        except Exception as e:
            # Catch any other exceptions
            logger.error(f"‚ùå Unexpected error: {type(e).__name__}: {e}")
            return IntentResult(
                intent=["UNCLEAR"],
                reason=f"Unexpected error: {type(e).__name__}: {str(e)}"
            )
